plugins {
    id 'java'
    id 'application'
//    id 'com.google.protobuf' version '0.8.12'
}

repositories {
    jcenter()
}

def String grpcVersion = '1.28.1'
def String protobufVersion = '3.11.0'
def String protocVersion = protobufVersion
def String nettyTcNativeVersion = '2.0.28.Final'

/**
 * Временная директория, куда генерируются proto
 */
def String pathGeneratedGrpcFiles = "${project.buildDir}/generated/source/proto"

/**
 * Параметр `-Pgrpc` сгенерировать java классы из файлов *.proto
 * @exapmle `gradle build -Pgrpc`
 */
def String nameParamGrpc = 'grpc'

/**
 * Параметр `-PshowTaskNames` для вывода названий тасков в процессе сборки
 * @example `gradle build -PshowTaskNames`
 */
def String nameParamShowTaskNames = 'showTaskNames'

/**
 * Параметр `-PwithoutExternalDependencies` собрать jar без внешних зависимостей
 * @example `gradle build -PwithoutExternalDependencies`
 */
def String nameParamWithoutExternalDependencies = 'withoutExternalDependencies'


def boolean isNeedGeneratedGrps = rootProject.hasProperty(nameParamGrpc)


dependencies {
    implementation 'com.google.guava:guava:28.1-jre'
//    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
//    implementation "io.grpc:grpc-netty:${grpcVersion}"
//    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
//    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
//    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.9'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    implementation files('libs/grpc-0.0.0.jar')

    compileOnly "javax.annotation:javax.annotation-api:1.2"

//    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
    runtimeOnly "io.netty:netty-tcnative-boringssl-static:${nettyTcNativeVersion}"

//    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"


    // если тесты будут в grpc, зависимость будет там
    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation "org.mockito:mockito-core:2.28.2" // 3.3.3

    testRuntimeOnly "org.junit.platform:junit-platform-launcher:1.6.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.2"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.6.2"
}

application {
    mainClassName = 'ru.vtb.s7.client.mkb.Application'
}


sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'src/main/grpc']
        }
    }

    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

jar {
    manifest {
        attributes("Main-Class": application.mainClassName)
    }

    /**
     * По умолчанию создаем jar с внешними зависимостями
     * Создает jar с внешними зависимостями
     */
    if (!rootProject.hasProperty(nameParamWithoutExternalDependencies)) {
        archiveClassifier = 'including-all-dependencies'
        from sourceSets.main.output
        dependsOn configurations.runtimeClasspath
        from {
            configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
        }
    }
}

// импорт из пакета файлов proto
//protobuf {
//    generatedFilesBaseDir = pathGeneratedGrpcFiles
//    protoc {
//        artifact = "com.google.protobuf:protoc:${protocVersion}"
//    }
//    plugins {
//        grpc {
//            artifact = 'io.grpc:protoc-gen-grpc-java:1.28.0'
//        }
//    }
//    generateProtoTasks {
//        all()*.plugins {
//            grpc {}
//        }
//    }
//}


//task copyProtobuf(type: Copy, description: "Copies java class proto file") {
//    from "${pathGeneratedGrpcFiles}/main/grpc"
//    from "${pathGeneratedGrpcFiles}/main/java"
//    into "$projectDir/src/main/grpc"
//    finalizedBy('deleteProtobufBuildDir')
//}


//task deleteTargetDirProtobuf(type: Delete) {
//    delete "$projectDir/src/main/grpc"
//}
//
//task deleteProtobufBuildDir(type: Delete) {
//    delete pathGeneratedGrpcFiles
//}


//if (isNeedGeneratedGrps) {
//    build.finalizedBy(copyProtobuf)
//
//    compileJava.dependsOn('deleteTargetDirProtobuf')
//    compileJava.dependsOn(clean)
//} else {
//    tasks.all {
//        if (name == "generateProto") {
//            setEnabled(false)
//        }
//    }
//}

task printDependencies {
    doLast {
        tasks.all {
            println("$name dependsOn $dependsOn")
        }
    }
}

if (rootProject.hasProperty(nameParamShowTaskNames)) {
    gradle.taskGraph.beforeTask { task ->
        println(task.name)
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
